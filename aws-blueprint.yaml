tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster.
imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.2.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  db_name:
    default: mydrupaldb

  db_user_name:
    default: admin

  db_user_password:
    default: 123

  schemaurl:
    type: string
    default: 'http://repository.cloudifysource.org/org/cloudifysource/examples/drupal/new_babies7.zip'


  mysql_security_group:
    type: string
    default: 'MySQL_AWS_Security_Group'

  vpc_id:
    description: The ID of the AWS VPC that will contain the NIC and Subnet.
    default: { get_secret: vpc_id }

  public_subnet_id:
    description: The ID of the AWS Subnet that will contain the master_nic.
    default: { get_secret: public_subnet_id }

  availability_zone:
    description: The availability zone where the VM should be deployed. This is the same as that of the Public Subnet.
    default: { get_secret: availability_zone }

  agent_key_private:
    description: The material of the private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: The material of a public SSH key.
    default: { get_secret: agent_key_public }


dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

    client_config: &client_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      region_name: { get_secret: ec2_region_name }


node_types:

  host:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      aws_config:
        default: *aws_config
      image_id:
        default: { get_input: ami }
      instance_type:
        default: { get_input: instance_type }
      name:
        default: Mysql Instance
      agent_config:
        default:
          install_method: remote
          user: { get_input: agent_user }
          port: 22
          key: { get_secret: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              default:
                block_device_map:
                  '/dev/sda1':
                    delete_on_termination: true
                placement: { get_secret: availability_zone }
                user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  mysql_dbms:
    derived_from: cloudify.nodes.DBMS
    properties:
      port:
        description: MySQL port
        type: integer
      sectionNames:
        description: A command separated list of my.cnf section names
        type: string
      variableNames:
        description: A command separated list of my.cnf variable names
        type: string
      newValues:
        description: A command separated list of my.cnf values for the above variable names
        type: string

  mysql_schema:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      port:
        description: MySQL port
        type: integer
      schemaurl:
        description: schema zip url
        type: string
      query:
        description: Test Query
        type: string


node_templates:

  mysql_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      resource_id: { get_input: drupal_security_group_name }
      description: Security group for Cloudify Manager VM
      rules:
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8080
          to_port: 8080
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8000
          to_port: 8000
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8081
          to_port: 8081
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 22
          to_port: 22
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 80
          to_port: 80
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 3306
          to_port: 3306
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 55672
          to_port: 55672
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 5672
          to_port: 5672
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 53229
          to_port: 53229
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8101
          to_port: 8101
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8100
          to_port: 8100
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  mysql_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *client_config
      tags: Mysql IP
      domain: vpc
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc

  mysql_vm:
    type: host
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mysql_security_group
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: public_subnet
      - target: mysql_ip
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip

  mysql_database:
    type: mysql_dbms
    properties:
      port: { get_input: dbPort }
      sectionNames: mysqld
      variableNames: bind-address
      newValues: 0.0.0.0
      dbName: mydrupaldb
      dbUserName: admin
      dbUserPassword: 123
    interfaces:
      cloudify.interfaces.lifecycle:
        create: mysql-scripts/install-mysql-aws.sh
        start: mysql-scripts/start-mysql.sh
        stop: mysql-scripts/stop-mysql.sh
    relationships:
      - target: mysql_vm
        type: cloudify.relationships.contained_in

  mysql_app_schema:
    type: mysql_schema
    properties:
      port: { get_input: dbPort }
      query: select name,mail from users
      schemaurl: { get_input: schemaurl }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: mysql-scripts/configure-mysql-schema.sh
      cloudify.interfaces.monitoring:
         start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
               collectors_config:
                  MySQLCollector:
                     config:
                        enabled: True
                        hosts: "admin:123@localhost:3306/mydrupaldb"
    relationships:
      - target: mysql_database
        type: cloudify.relationships.contained_in

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_secret: agent_key_public }


outputs:

  ip:
    description: Public IP Address
    value: { get_attribute: [ mysql_ip, aws_resource_id ] }